name: Build and Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      NDK_VERSION: r27c

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true

      - name: Set NDK_ROOT environment variable
        run: echo "NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      - name: Make build script executable
        run: chmod +x ./build.sh

      - name: Get commit count
        id: commit_count
        run: echo "COUNT=$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT

      - name: Run build script for release
        run: ./build.sh --release
        env:
          NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Set version variable
        id: set_version
        run: echo "VERSION=${{ steps.commit_count.outputs.COUNT }}" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ env.VERSION }} --repo ${{ github.repository }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Automated release based on commit count.
            Version: ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload all release assets
        if: steps.check_release.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in release/*; do
            echo "Uploading $file"
            gh release upload ${{ env.VERSION }} "$file" --repo ${{ github.repository }}
          done